/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

/**
 * 
 */
export class FloatingIpApi extends runtime.BaseAPI {

    /**
     */
    async floatingIpControllerEligibleVmsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/floating-ip/eligible-vms/{ip_id}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async floatingIpControllerEligibleVms(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.floatingIpControllerEligibleVmsRaw(initOverrides);
    }

    /**
     */
    async floatingIpControllerListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/floating-ip`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async floatingIpControllerList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.floatingIpControllerListRaw(initOverrides);
    }

    /**
     */
    async floatingIpControllerMoveFloatingIpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/floating-ip/move`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async floatingIpControllerMoveFloatingIp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.floatingIpControllerMoveFloatingIpRaw(initOverrides);
    }

    /**
     */
    async floatingIpControllerSetModeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/floating-ip/mode`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async floatingIpControllerSetMode(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.floatingIpControllerSetModeRaw(initOverrides);
    }

}
