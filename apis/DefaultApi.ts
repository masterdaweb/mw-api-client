/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthEntity,
  DeleteFloatingIpDto,
  LoginDto,
  ProxmoxDto,
  SetupFloatingIpDto,
} from '../models/index';
import {
    AuthEntityFromJSON,
    AuthEntityToJSON,
    DeleteFloatingIpDtoFromJSON,
    DeleteFloatingIpDtoToJSON,
    LoginDtoFromJSON,
    LoginDtoToJSON,
    ProxmoxDtoFromJSON,
    ProxmoxDtoToJSON,
    SetupFloatingIpDtoFromJSON,
    SetupFloatingIpDtoToJSON,
} from '../models/index';

export interface AdminControllerLoginRequest {
    loginDto: LoginDto;
}

export interface ProxmoxControllerSshRequest {
    proxmoxDto: ProxmoxDto;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     */
    async adminControllerLoginRaw(requestParameters: AdminControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthEntity>> {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError(
                'loginDto',
                'Required parameter "loginDto" was null or undefined when calling adminControllerLogin().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/admin/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LoginDtoToJSON(requestParameters['loginDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthEntityFromJSON(jsonValue));
    }

    /**
     */
    async adminControllerLogin(requestParameters: AdminControllerLoginRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthEntity> {
        const response = await this.adminControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async adminControllerSetModeRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/setup-floating-ip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async adminControllerSetMode(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.adminControllerSetModeRaw(initOverrides);
    }

    /**
     */
    async adminControllerWhmcsAuthenticateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/admin/whmcs-authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async adminControllerWhmcsAuthenticate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.adminControllerWhmcsAuthenticateRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async appControllerGetHelloRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async appControllerGetHello(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.appControllerGetHelloRaw(initOverrides);
    }

    /**
     */
    async legacyMwApiControllerGetAccessTokenRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/legacy-mw-api/authenticate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async legacyMwApiControllerGetAccessToken(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.legacyMwApiControllerGetAccessTokenRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async proxmoxControllerDeleteFloatingIpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DeleteFloatingIpDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proxmox/floating-ip/{vm_id}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DeleteFloatingIpDtoFromJSON(jsonValue));
    }

    /**
     */
    async proxmoxControllerDeleteFloatingIp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DeleteFloatingIpDto> {
        const response = await this.proxmoxControllerDeleteFloatingIpRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async proxmoxControllerSetupFloatingIpRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SetupFloatingIpDto>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/proxmox/floating-ip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SetupFloatingIpDtoFromJSON(jsonValue));
    }

    /**
     */
    async proxmoxControllerSetupFloatingIp(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SetupFloatingIpDto> {
        const response = await this.proxmoxControllerSetupFloatingIpRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async proxmoxControllerSshRaw(requestParameters: ProxmoxControllerSshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxmoxDto>> {
        if (requestParameters['proxmoxDto'] == null) {
            throw new runtime.RequiredError(
                'proxmoxDto',
                'Required parameter "proxmoxDto" was null or undefined when calling proxmoxControllerSsh().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/proxmox/ssh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProxmoxDtoToJSON(requestParameters['proxmoxDto']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxmoxDtoFromJSON(jsonValue));
    }

    /**
     */
    async proxmoxControllerSsh(requestParameters: ProxmoxControllerSshRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxmoxDto> {
        const response = await this.proxmoxControllerSshRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
