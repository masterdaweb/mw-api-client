/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { DatacenterEntity } from './DatacenterEntity';
import {
    DatacenterEntityFromJSON,
    DatacenterEntityFromJSONTyped,
    DatacenterEntityToJSON,
    DatacenterEntityToJSONTyped,
} from './DatacenterEntity';

/**
 * 
 * @export
 * @interface ServerEntity
 */
export interface ServerEntity {
    /**
     * 
     * @type {number}
     * @memberof ServerEntity
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof ServerEntity
     */
    datacenterId: number;
    /**
     * 
     * @type {string}
     * @memberof ServerEntity
     */
    node: string;
    /**
     * 
     * @type {string}
     * @memberof ServerEntity
     */
    host: string;
    /**
     * 
     * @type {string}
     * @memberof ServerEntity
     */
    ip: string;
    /**
     * 
     * @type {number}
     * @memberof ServerEntity
     */
    clusterId: number;
    /**
     * 
     * @type {boolean}
     * @memberof ServerEntity
     */
    publicHost: boolean;
    /**
     * 
     * @type {string}
     * @memberof ServerEntity
     */
    publicInterface: string;
    /**
     * 
     * @type {string}
     * @memberof ServerEntity
     */
    privateInterface: string;
    /**
     * 
     * @type {string}
     * @memberof ServerEntity
     */
    bridgeInterface: string;
    /**
     * 
     * @type {boolean}
     * @memberof ServerEntity
     */
    active: boolean;
    /**
     * 
     * @type {Date}
     * @memberof ServerEntity
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServerEntity
     */
    updatedAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof ServerEntity
     */
    deletedAt: Date;
    /**
     * 
     * @type {DatacenterEntity}
     * @memberof ServerEntity
     */
    datacenters: DatacenterEntity;
}

/**
 * Check if a given object implements the ServerEntity interface.
 */
export function instanceOfServerEntity(value: object): value is ServerEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('datacenterId' in value) || value['datacenterId'] === undefined) return false;
    if (!('node' in value) || value['node'] === undefined) return false;
    if (!('host' in value) || value['host'] === undefined) return false;
    if (!('ip' in value) || value['ip'] === undefined) return false;
    if (!('clusterId' in value) || value['clusterId'] === undefined) return false;
    if (!('publicHost' in value) || value['publicHost'] === undefined) return false;
    if (!('publicInterface' in value) || value['publicInterface'] === undefined) return false;
    if (!('privateInterface' in value) || value['privateInterface'] === undefined) return false;
    if (!('bridgeInterface' in value) || value['bridgeInterface'] === undefined) return false;
    if (!('active' in value) || value['active'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    if (!('deletedAt' in value) || value['deletedAt'] === undefined) return false;
    if (!('datacenters' in value) || value['datacenters'] === undefined) return false;
    return true;
}

export function ServerEntityFromJSON(json: any): ServerEntity {
    return ServerEntityFromJSONTyped(json, false);
}

export function ServerEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): ServerEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'datacenterId': json['datacenter_id'],
        'node': json['node'],
        'host': json['host'],
        'ip': json['ip'],
        'clusterId': json['cluster_id'],
        'publicHost': json['public_host'],
        'publicInterface': json['public_interface'],
        'privateInterface': json['private_interface'],
        'bridgeInterface': json['bridge_interface'],
        'active': json['active'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
        'deletedAt': (new Date(json['deleted_at'])),
        'datacenters': DatacenterEntityFromJSON(json['datacenters']),
    };
}

  export function ServerEntityToJSON(json: any): ServerEntity {
      return ServerEntityToJSONTyped(json, false);
  }

  export function ServerEntityToJSONTyped(value?: ServerEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'datacenter_id': value['datacenterId'],
        'node': value['node'],
        'host': value['host'],
        'ip': value['ip'],
        'cluster_id': value['clusterId'],
        'public_host': value['publicHost'],
        'public_interface': value['publicInterface'],
        'private_interface': value['privateInterface'],
        'bridge_interface': value['bridgeInterface'],
        'active': value['active'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
        'deleted_at': ((value['deletedAt']).toISOString()),
        'datacenters': DatacenterEntityToJSON(value['datacenters']),
    };
}

