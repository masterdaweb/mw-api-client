/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VpcEntity
 */
export interface VpcEntity {
    /**
     * The ID of the VPC
     * @type {string}
     * @memberof VpcEntity
     */
    id: string;
    /**
     * The client ID associated with the VPC
     * @type {number}
     * @memberof VpcEntity
     */
    clientId: number;
    /**
     * The cluster ID associated with the VPC
     * @type {number}
     * @memberof VpcEntity
     */
    clusterId: number;
    /**
     * The name of the VPC
     * @type {string}
     * @memberof VpcEntity
     */
    name: string;
    /**
     * The description of the VPC
     * @type {string}
     * @memberof VpcEntity
     */
    description?: string;
    /**
     * The VXLAN ID of the VPC
     * @type {number}
     * @memberof VpcEntity
     */
    vxlan: number;
    /**
     * The DHCP subnet of the VPC
     * @type {string}
     * @memberof VpcEntity
     */
    dhcpSubnet: string;
    /**
     * The creation date of the VPC
     * @type {Date}
     * @memberof VpcEntity
     */
    createdAt: Date;
    /**
     * The last update date of the VPC
     * @type {Date}
     * @memberof VpcEntity
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the VpcEntity interface.
 */
export function instanceOfVpcEntity(value: object): value is VpcEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('clientId' in value) || value['clientId'] === undefined) return false;
    if (!('clusterId' in value) || value['clusterId'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('vxlan' in value) || value['vxlan'] === undefined) return false;
    if (!('dhcpSubnet' in value) || value['dhcpSubnet'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function VpcEntityFromJSON(json: any): VpcEntity {
    return VpcEntityFromJSONTyped(json, false);
}

export function VpcEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): VpcEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'clientId': json['client_id'],
        'clusterId': json['cluster_id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'vxlan': json['vxlan'],
        'dhcpSubnet': json['dhcp_subnet'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

  export function VpcEntityToJSON(json: any): VpcEntity {
      return VpcEntityToJSONTyped(json, false);
  }

  export function VpcEntityToJSONTyped(value?: VpcEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'client_id': value['clientId'],
        'cluster_id': value['clusterId'],
        'name': value['name'],
        'description': value['description'],
        'vxlan': value['vxlan'],
        'dhcp_subnet': value['dhcpSubnet'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

