/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface VpcVmsEntity
 */
export interface VpcVmsEntity {
    /**
     * The ID of the VPC-VM relationship
     * @type {string}
     * @memberof VpcVmsEntity
     */
    id: string;
    /**
     * The ID of the VPC
     * @type {string}
     * @memberof VpcVmsEntity
     */
    vpcsId: string;
    /**
     * The ID of the VM
     * @type {string}
     * @memberof VpcVmsEntity
     */
    vmId: string;
    /**
     * The bridge ID associated with the VM in the VPC
     * @type {string}
     * @memberof VpcVmsEntity
     */
    bridgeId: string;
    /**
     * The status of the VM in the VPC
     * @type {string}
     * @memberof VpcVmsEntity
     */
    status: string;
    /**
     * The creation date of the VPC-VM relationship
     * @type {Date}
     * @memberof VpcVmsEntity
     */
    createdAt: Date;
    /**
     * The last update date of the VPC-VM relationship
     * @type {Date}
     * @memberof VpcVmsEntity
     */
    updatedAt: Date;
}

/**
 * Check if a given object implements the VpcVmsEntity interface.
 */
export function instanceOfVpcVmsEntity(value: object): value is VpcVmsEntity {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('vpcsId' in value) || value['vpcsId'] === undefined) return false;
    if (!('vmId' in value) || value['vmId'] === undefined) return false;
    if (!('bridgeId' in value) || value['bridgeId'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('updatedAt' in value) || value['updatedAt'] === undefined) return false;
    return true;
}

export function VpcVmsEntityFromJSON(json: any): VpcVmsEntity {
    return VpcVmsEntityFromJSONTyped(json, false);
}

export function VpcVmsEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): VpcVmsEntity {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'vpcsId': json['vpcs_id'],
        'vmId': json['vm_id'],
        'bridgeId': json['bridge_id'],
        'status': json['status'],
        'createdAt': (new Date(json['created_at'])),
        'updatedAt': (new Date(json['updated_at'])),
    };
}

  export function VpcVmsEntityToJSON(json: any): VpcVmsEntity {
      return VpcVmsEntityToJSONTyped(json, false);
  }

  export function VpcVmsEntityToJSONTyped(value?: VpcVmsEntity | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'vpcs_id': value['vpcsId'],
        'vm_id': value['vmId'],
        'bridge_id': value['bridgeId'],
        'status': value['status'],
        'created_at': ((value['createdAt']).toISOString()),
        'updated_at': ((value['updatedAt']).toISOString()),
    };
}

