"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.VmApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class VmApi extends runtime.BaseAPI {
    /**
     */
    async vmControllerFindVmsRaw(requestParameters, initOverrides) {
        const queryParameters = {};
        if (requestParameters['clusterId'] != null) {
            queryParameters['cluster_id'] = requestParameters['clusterId'];
        }
        if (requestParameters['id'] != null) {
            queryParameters['id'] = requestParameters['id'];
        }
        const headerParameters = {};
        const response = await this.request({
            path: `/vm/filter`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.VmEntityFromJSON));
    }
    /**
     */
    async vmControllerFindVms(requestParameters = {}, initOverrides) {
        const response = await this.vmControllerFindVmsRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async vmControllerListRaw(requestParameters, initOverrides) {
        if (requestParameters['vmId'] == null) {
            throw new runtime.RequiredError('vmId', 'Required parameter "vmId" was null or undefined when calling vmControllerList().');
        }
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/vm`.replace(`{${"vm_id"}}`, encodeURIComponent(String(requestParameters['vmId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.VmEntityFromJSON));
    }
    /**
     */
    async vmControllerList(requestParameters, initOverrides) {
        const response = await this.vmControllerListRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async vmControllerListVmRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/vm/{vm_id}`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.VmEntityFromJSON));
    }
    /**
     */
    async vmControllerListVm(initOverrides) {
        const response = await this.vmControllerListVmRaw(initOverrides);
        return await response.value();
    }
}
exports.VmApi = VmApi;
