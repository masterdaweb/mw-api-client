"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Master da Web API
 * The Master da Web API documentation
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DefaultApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class DefaultApi extends runtime.BaseAPI {
    /**
     */
    async adminControllerLoginRaw(requestParameters, initOverrides) {
        if (requestParameters['loginDto'] == null) {
            throw new runtime.RequiredError('loginDto', 'Required parameter "loginDto" was null or undefined when calling adminControllerLogin().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/admin/authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.LoginDtoToJSON)(requestParameters['loginDto']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuthEntityFromJSON)(jsonValue));
    }
    /**
     */
    async adminControllerLogin(requestParameters, initOverrides) {
        const response = await this.adminControllerLoginRaw(requestParameters, initOverrides);
        return await response.value();
    }
    /**
     */
    async adminControllerSetModeRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/admin/setup-floating-ip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async adminControllerSetMode(initOverrides) {
        await this.adminControllerSetModeRaw(initOverrides);
    }
    /**
     */
    async adminControllerWhmcsAuthenticateRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/admin/whmcs-authenticate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     */
    async adminControllerWhmcsAuthenticate(initOverrides) {
        const response = await this.adminControllerWhmcsAuthenticateRaw(initOverrides);
        return await response.value();
    }
    /**
     */
    async appControllerGetHelloRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     */
    async appControllerGetHello(initOverrides) {
        await this.appControllerGetHelloRaw(initOverrides);
    }
    /**
     */
    async legacyMwApiControllerGetAccessTokenRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/legacy-mw-api/authenticate`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse(response);
        }
        else {
            return new runtime.TextApiResponse(response);
        }
    }
    /**
     */
    async legacyMwApiControllerGetAccessToken(initOverrides) {
        const response = await this.legacyMwApiControllerGetAccessTokenRaw(initOverrides);
        return await response.value();
    }
    /**
     */
    async proxmoxControllerDeleteFloatingIpRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/proxmox/floating-ip/{vm_id}`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.DeleteFloatingIpDtoFromJSON)(jsonValue));
    }
    /**
     */
    async proxmoxControllerDeleteFloatingIp(initOverrides) {
        const response = await this.proxmoxControllerDeleteFloatingIpRaw(initOverrides);
        return await response.value();
    }
    /**
     */
    async proxmoxControllerSetupFloatingIpRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        const response = await this.request({
            path: `/proxmox/floating-ip`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SetupFloatingIpDtoFromJSON)(jsonValue));
    }
    /**
     */
    async proxmoxControllerSetupFloatingIp(initOverrides) {
        const response = await this.proxmoxControllerSetupFloatingIpRaw(initOverrides);
        return await response.value();
    }
    /**
     */
    async proxmoxControllerSshRaw(requestParameters, initOverrides) {
        if (requestParameters['proxmoxDto'] == null) {
            throw new runtime.RequiredError('proxmoxDto', 'Required parameter "proxmoxDto" was null or undefined when calling proxmoxControllerSsh().');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        const response = await this.request({
            path: `/proxmox/ssh`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, index_1.ProxmoxDtoToJSON)(requestParameters['proxmoxDto']),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ProxmoxDtoFromJSON)(jsonValue));
    }
    /**
     */
    async proxmoxControllerSsh(requestParameters, initOverrides) {
        const response = await this.proxmoxControllerSshRaw(requestParameters, initOverrides);
        return await response.value();
    }
}
exports.DefaultApi = DefaultApi;
